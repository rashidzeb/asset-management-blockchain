{
  "language": "Solidity",
  "sources": {
    "contracts/AssetPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.9;\n\nerror AssetPool__NotAdmin();\nerror AssetPool__FundsAlreadyInvested();\nerror AssetPool__NotEnoughBalanceInContract();\n\ncontract AssetPool {\n    address[] private clients;\n    Asset[] private assetsArr;\n    address private immutable i_admin;\n    mapping(address => uint256) private addressToAmount;\n    mapping(address => uint256) private addressToInvestment;\n    mapping(address => bool) private investmentFlag;\n\n    struct Asset {\n        uint256 id;\n        string assetPrice;\n        string title;\n        string location;\n    }\n\n    modifier administrator() {\n        if (msg.sender != i_admin) {\n            revert AssetPool__NotAdmin();\n        }\n        _;\n    }\n\n    modifier investmentStatus() {\n        if (investmentFlag[msg.sender] != false) {\n            revert AssetPool__FundsAlreadyInvested();\n        }\n        _;\n    }\n\n    modifier checkContractBalance() {\n        if (address(this).balance < 1e16) {\n            revert AssetPool__NotEnoughBalanceInContract();\n        }\n        _;\n    }\n\n    constructor() {\n        i_admin = msg.sender;\n    }\n\n    receive() external payable {\n        depositFund();\n    }\n\n    fallback() external payable {\n        depositFund();\n    }\n\n    function depositFund() public payable {\n        require(msg.value >= 1e16, \"You need to deposit at least 0.01 Eth\");\n        clients.push(msg.sender);\n        addressToAmount[msg.sender] += msg.value;\n        investmentFlag[msg.sender] = false;\n    }\n\n    function invest() public investmentStatus {\n        require(addressToAmount[msg.sender] >= 1e16, \"Funds too low to invest\");\n        investmentFlag[msg.sender] = true;\n        addressToInvestment[msg.sender] += addressToAmount[msg.sender];\n        addressToAmount[msg.sender] = 0;\n    }\n\n    function withdraw(uint256 _withdrawAmount)\n        public\n        investmentStatus\n        checkContractBalance\n    {\n        require(\n            _withdrawAmount <= addressToAmount[msg.sender],\n            \"You don't have enough balance\"\n        );\n        addressToAmount[msg.sender] -= _withdrawAmount;\n        (bool callSuccess, ) = payable(msg.sender).call{value: _withdrawAmount}(\n            \"\"\n        );\n        require(callSuccess, \"Call Failed\");\n    }\n\n    function withdrawContractFunds() public administrator checkContractBalance {\n        (bool callSuccess, ) = i_admin.call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call Failed\");\n    }\n\n    function createAsset(\n        string memory _assetPrice,\n        string memory _title,\n        string memory _location\n    ) public administrator {\n        Asset memory asset;\n\n        asset.id = assetsArr.length;\n        asset.assetPrice = _assetPrice;\n        asset.title = _title;\n        asset.location = _location;\n\n        assetsArr.push(asset);\n    }\n\n    function getAsset(uint256 _id)\n        public\n        view\n        returns (\n            uint256,\n            string memory,\n            string memory,\n            string memory\n        )\n    {\n        uint256 index = _id;\n        return (\n            assetsArr[index].id,\n            assetsArr[index].assetPrice,\n            assetsArr[index].title,\n            assetsArr[index].location\n        );\n    }\n\n    function getMyBalance() public view returns (uint256) {\n        return addressToAmount[msg.sender];\n    }\n\n    function getInvestedAmount() public view returns (uint256) {\n        return addressToInvestment[msg.sender];\n    }\n\n    function getInvestmentStatus() public view returns (bool) {\n        return investmentFlag[msg.sender];\n    }\n\n    function getContractBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function isAdmin() public view returns (bool) {\n        if (msg.sender == i_admin) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}